<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:Orc.Controls" xmlns:catel="http://schemas.catelproject.com" xmlns:automation="clr-namespace:Orc.Controls.Automation" xmlns:orctheming="http://schemas.wildgums.com/orc/theming" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:converters="clr-namespace:Orc.Controls.Converters" xmlns:xamlbehaviors="http://schemas.microsoft.com/xaml/behaviors">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/Orc.Theming;component/themes/generic.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <Style x:Key="{x:Type local:AlignmentGrid}" TargetType="{x:Type local:AlignmentGrid}" />
  <Style x:Key="{x:Type local:AnimatedGif}" TargetType="{x:Type local:AnimatedGif}" />
  <Style x:Key="{x:Type local:AnimatingTextBlock}" TargetType="{x:Type local:AnimatingTextBlock}" />
  <Style TargetType="{x:Type local:PredefinedColorItem}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:PredefinedColorItem}">
          <StackPanel Orientation="Horizontal">
            <Rectangle x:Name="RectangleColor" Height="11" Width="22" StrokeThickness="1" Stroke="Black">
              <Rectangle.Fill>
                <SolidColorBrush Color="{Binding Color, RelativeSource={RelativeSource TemplatedParent}}" />
              </Rectangle.Fill>
            </Rectangle>
            <TextBlock x:Name="TextBlockColor" TextOptions.TextRenderingMode="ClearType" FontSize="{orctheming:FontSize 11}" Foreground="{TemplateBinding Foreground}" Margin="10,0" Text="{TemplateBinding Text}" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <x:Static x:Key="Empty" Member="sys:String.Empty" />
  <Style x:Key="{x:Type local:LogMessageCategoryControl}" TargetType="{x:Type local:LogMessageCategoryControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:LogMessageCategoryControl}">
          <Grid Width="20" Height="20">
            <Viewbox x:Name="Viewbox" Height="12" Width="12">
              <Path Data="{TemplateBinding Category, Converter={converters:LogMessageCategoryPathConverter}}" HorizontalAlignment="Center" Margin="0" SnapsToDevicePixels="True" Stretch="Fill" UseLayoutRounding="True" Fill="{TemplateBinding Category, Converter={converters:LogMessageCategoryBorderBrushConverter}}" VerticalAlignment="Center" />
            </Viewbox>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:LogMessageCategoryToggleButton}" TargetType="{x:Type local:LogMessageCategoryToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:LogMessageCategoryToggleButton}">
          <ToggleButton x:Name="PART_Toggle" IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:LogMessageCategoryToggleButton}}, Path=IsChecked}" Width="100" Margin="0" HorizontalContentAlignment="Stretch">
            <Grid HorizontalAlignment="Stretch" Margin="0,0,4,0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <local:LogMessageCategoryControl Grid.Column="0" Category="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:LogMessageCategoryToggleButton}}, Path=Category}" />
              <TextBlock x:Name="PART_EntryCountTextBlock" Grid.Column="2" Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:LogMessageCategoryToggleButton}}, Path=EntryCount}" VerticalAlignment="Center" />
              <TextBlock x:Name="PART_CategoryTextBlock" Grid.Column="3" Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:LogMessageCategoryToggleButton}}, Path=Category, Converter={converters:LogMessageCategoryTextConverter}}" VerticalAlignment="Center" />
            </Grid>
          </ToggleButton>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:SaveFilePicker}" TargetType="{x:Type local:SaveFilePicker}" />
  <Geometry x:Key="RectangleGeometry">M4,2L20,2C21.1,2 22,2.9 22,4L22,20C22,21.1 21.1,22 20,22L4,22C2.9,22 2,21.1 2,20L2,4C2,2.9 2.9,2 4,2ZM4,4L4,20L20,20L20,4L4,4ZM13,15L11,15L11,17L13,17L13,15ZM13,7L11,7L11,13L13,13L13,7Z</Geometry>
  <Geometry x:Key="TriangleGeometry">M2,21.9997L12,2.00026L20.6247,19.2199L20.6291,19.2199L22,21.9997L22,21.9997L22,21.9997L2,21.9997ZM5.0287,19.9997L18.9638,19.9997L12,6.11526L5.0287,19.9997ZM12.9376,16.5456L11.2947,16.5456L11.2947,18.2081L12.9376,18.2081L12.9376,16.5456ZM12.9376,11.5581L11.2947,11.5581L11.2947,14.8831L12.9376,14.8831L12.9376,11.5581Z</Geometry>
  <Geometry x:Key="ArrowsOutGeometry">M9.5,13.09L10.91,14.5L6.41,19H10V21H3V14H5V17.59L9.5,13.09M10.91,9.5L9.5,10.91L5,6.41V10H3V3H10V5H6.41L10.91,9.5M14.5,13.09L19,17.59V14H21V21H14V19H17.59L13.09,14.5L14.5,13.09M13.09,9.5L17.59,5H14V3H21V10H19V6.41L14.5,10.91L13.09,9.5Z</Geometry>
  <Geometry x:Key="ArrowsInGeometry">M19.5,3.09L20.91,4.5L16.41,9H20V11H13V4H15V7.59L19.5,3.09M20.91,19.5L19.5,20.91L15,16.41V20H13V13H20V15H16.41L20.91,19.5M4.5,3.09L9,7.59V4H11V11H4V9H7.59L3.09,4.5L4.5,3.09M3.09,19.5L7.59,15H4V13H11V20H9V16.41L4.5,20.91L3.09,19.5Z</Geometry>
  <Style x:Key="{x:Type local:ValidationContextView}" TargetType="{x:Type local:ValidationContextView}" />
  <Style x:Key="ValidationContextTextBlock" TargetType="{x:Type TextBlock}">
    <Setter Property="Margin" Value="4,0,0,0" />
  </Style>
  <converters:TreeViewItemToLeftMarginValueConverter Length="15" x:Key="LengthConverter" />
  <SolidColorBrush x:Key="ValidationContextTreeViewDisabledForegroundBrush" Color="DarkGray" />
  <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
  <Style x:Key="ValidationContextTreeViewItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Geometry x:Key="LogDebugGeometry">M15.73,3L21,8.27L21,15.73L15.73,21L8.27,21L3,15.73L3,8.27L8.27,3L15.73,3ZM14.9,5L9.1,5L5,9.1L5,14.9L9.1,19L14.9,19L19,14.9L19,9.1L14.9,5ZM11,17L13,17L13,11L11,11L11,17ZM11,9L13,9L13,7L11,7L11,9Z</Geometry>
  <Geometry x:Key="LogWarningGeometry">M4,2L20,2C21.1,2 22,2.9 22,4L22,20C22,21.1 21.1,22 20,22L4,22C2.9,22 2,21.1 2,20L2,4C2,2.9 2.9,2 4,2ZM4,4L4,20L20,20L20,4L4,4ZM13,15L11,15L11,17L13,17L13,15ZM13,7L11,7L11,13L13,13L13,7Z</Geometry>
  <Geometry x:Key="LogErrorGeometry">M2,21.9997L12,2.00026L20.6247,19.2199L20.6291,19.2199L22,21.9997L22,21.9997L22,21.9997L2,21.9997ZM5.0287,19.9997L18.9638,19.9997L12,6.11526L5.0287,19.9997ZM12.9376,16.5456L11.2947,16.5456L11.2947,18.2081L12.9376,18.2081L12.9376,16.5456ZM12.9376,11.5581L11.2947,11.5581L11.2947,14.8831L12.9376,14.8831L12.9376,11.5581Z</Geometry>
  <Geometry x:Key="LogInfoGeometry">M11,9L13,9L13,7L11,7M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2C6.51416,2 2,6.51416 2,12C2,17.4858 6.51416,22 12,22C17.4858,22 22,17.4858 22,12C22,6.51416 17.4858,2 12,2M11,17L13,17L13,11L11,11L11,17Z</Geometry>
  <Style x:Key="{x:Type local:BindableRichTextBox}" TargetType="{x:Type local:BindableRichTextBox}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBoxBase">
          <Border Name="border" BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" SnapsToDevicePixels="True">
            <ScrollViewer Name="PART_ContentHost" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="False" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:BusyIndicator}" TargetType="{x:Type local:BusyIndicator}">
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
  </Style>
  <Style x:Key="{x:Type local:ColorLegend}" TargetType="{x:Type local:ColorLegend}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <local:MultipleCommandParameterConverter x:Key="MultipleCommandParametersConverter" />
      <Geometry x:Key="SettingsGeometry">M391.731,618.796C380.8,657.999 344.804,686.796 302.135,686.796C259.467,686.796 223.471,657.999 212.54,618.796L34.704,618.796L34.704,568.796L212.54,568.796C223.471,
                529.594 259.467,500.796 302.135,500.796C344.804,500.796 380.8,529.594 391.731,568.796L734.704,568.796L734.704,618.796L391.731,618.796ZM302.135,547.296C327.799,547.296 348.635,
                568.132 348.635,593.796C348.635,619.46 327.799,640.296 302.135,640.296C276.471,640.296 255.635,619.46 255.635,593.796C255.635,568.132 276.471,547.296 302.135,547.296ZM653.045,
                411.63C642.115,450.832 606.119,479.63 563.45,479.63C520.781,479.63 484.786,450.832 473.855,411.63L33.296,411.63L33.296,361.63L473.855,361.63C484.786,322.427 520.781,293.63 563.45,
                293.63C606.119,293.63 642.115,322.427 653.045,361.63L733.296,361.63L733.296,411.63L653.045,411.63ZM563.45,340.13C589.114,340.13 609.95,360.966 609.95,386.63C609.95,412.294 589.114,
                433.13 563.45,433.13C537.786,433.13 516.95,412.294 516.95,386.63C516.95,360.966 537.786,340.13 563.45,340.13ZM309.205,199.292C298.244,238.45 262.271,267.204 219.634,267.204C176.998,
                267.204 141.024,238.45 130.064,199.292L33.296,199.292L33.296,149.292L130.014,149.292C140.916,110.044 176.934,81.204 219.634,81.204C262.335,81.204 298.353,110.044 309.254,149.292L733.296,
                149.292L733.296,199.292L309.205,199.292ZM219.634,127.704C245.298,127.704 266.134,148.54 266.134,174.204C266.134,199.868 245.298,220.704 219.634,220.704C193.97,220.704 173.134,199.868 173.134,
                174.204C173.134,148.54 193.97,127.704 219.634,127.704Z</Geometry>
    </Style.Resources>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ColorLegend}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition x:Name="toolsContainerRow" Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <ContentControl Content="{TemplateBinding Header}" Visibility="{TemplateBinding Header, Converter={catel:ReferenceToCollapsingVisibilityConverter}}" />
              <!-- Filler border in case we are showing a legend -->
              <Border Grid.Row="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0 0 0 1" Visibility="{TemplateBinding Header, Converter={catel:ReferenceToCollapsingVisibilityConverter}}" />
              <Border Grid.Row="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0 0 0 1" Visibility="{Binding ShowToolBox, RelativeSource={RelativeSource TemplatedParent}, Converter={catel:BooleanToCollapsingVisibilityConverter}}">
                <Grid x:Name="toolsContainer" Margin="0">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <local:DropDownButton x:Name="PART_Settings_Button" AutomationProperties.AutomationId="SettingsButton" Grid.Column="0" BorderThickness="0" Width="40" Visibility="{Binding ShowSettingsBox, RelativeSource={RelativeSource TemplatedParent}, Converter={catel:BooleanToCollapsingVisibilityConverter}}">
                    <local:DropDownButton.Header>
                      <Grid>
                        <Viewbox Height="15">
                          <Path Data="{StaticResource SettingsGeometry}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" SnapsToDevicePixels="True" Stretch="Fill" UseLayoutRounding="True" VerticalAlignment="Center" />
                        </Viewbox>
                      </Grid>
                    </local:DropDownButton.Header>
                    <local:DropDownButton.DropDown>
                      <ContextMenu Background="{DynamicResource Orc.Brushes.Control.Default.Background}" AutomationProperties.AutomationId="ColorLegendSettingsContextMenu">
                        <MenuItem Background="Transparent" AutomationProperties.AutomationId="ShowVisibilityColumnMenuItem">
                          <MenuItem.Header>
                            <CheckBox Content="{catel:LanguageBinding Controls_ColorLegendGeneric_CheckBox_Content_ShowVisibilityColumn}" IsChecked="{Binding Path=ShowColorVisibilityControls, RelativeSource={RelativeSource TemplatedParent}}" />
                          </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Background="Transparent" AutomationProperties.AutomationId="AllowColorEditMenuItem">
                          <MenuItem.Header>
                            <CheckBox Content="{catel:LanguageBinding Controls_ColorLegendGeneric_CheckBox_Content_AllowColorEdit}" IsChecked="{Binding Path=AllowColorEditing, RelativeSource={RelativeSource TemplatedParent}}" />
                          </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Background="Transparent" AutomationProperties.AutomationId="ShowColorsMenuItem">
                          <MenuItem.Header>
                            <CheckBox Content="Show colors" IsChecked="{Binding Path=ShowColorPicker, RelativeSource={RelativeSource TemplatedParent}}" />
                          </MenuItem.Header>
                        </MenuItem>
                      </ContextMenu>
                    </local:DropDownButton.DropDown>
                  </local:DropDownButton>
                  <local:FilterBox Grid.Column="1" Watermark="{TemplateBinding FilterWatermark}" PropertyName="Description" Visibility="{Binding ShowSearchBox, RelativeSource={RelativeSource TemplatedParent}, Converter={catel:BooleanToCollapsingVisibilityConverter}}" FilterSource="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}" Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}}" />
                </Grid>
              </Border>
              <ListView x:Name="PART_List" AutomationProperties.AutomationId="List" Grid.Row="3" ItemsSource="{Binding FilteredItemsSource, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="0" HorizontalContentAlignment="Stretch">
                <ListView.ItemTemplate>
                  <DataTemplate DataType="{x:Type local:IColorLegendItem}">
                    <Grid HorizontalAlignment="Stretch" Margin="0">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="visibilityCheckColumn" Width="Auto" />
                        <ColumnDefinition x:Name="colorPickerColumn" Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                      </Grid.ColumnDefinitions>
                      <CheckBox x:Name="visibilityCheckbox" AutomationProperties.AutomationId="VisibilityCheckBox" Margin="0 0 2 0" Grid.Column="0" IsChecked="{Binding IsChecked}" VerticalAlignment="Center" Visibility="{Binding ShowColorVisibilityControls, RelativeSource={RelativeSource AncestorType={x:Type local:ColorLegend}}, Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
                      <Button x:Name="PART_ButtonColorChange" AutomationProperties.AutomationId="ColorChangeButton" Margin="2 0 10 0" Grid.Column="1" Height="14" VerticalAlignment="Center" Command="{Binding ChangeColor, RelativeSource={RelativeSource AncestorType={x:Type local:ColorLegend}}}">
                        <Button.CommandParameter>
                          <MultiBinding Converter="{StaticResource MultipleCommandParametersConverter}">
                            <Binding ElementName="PART_ButtonColorChange" />
                            <Binding />
                          </MultiBinding>
                        </Button.CommandParameter>
                        <Button.Template>
                          <ControlTemplate TargetType="{x:Type Button}">
                            <Grid Background="Transparent">
                              <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                  <VisualState x:Name="Normal" />
                                  <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="arrow" Storyboard.TargetProperty="Visibility">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                      </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                  </VisualState>
                                  <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                              </VisualStateManager.VisualStateGroups>
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="14" />
                                <ColumnDefinition Width="10" />
                              </Grid.ColumnDefinitions>
                              <Ellipse Width="14" Height="14">
                                <Ellipse.Fill>
                                  <SolidColorBrush Color="{Binding Color, UpdateSourceTrigger=PropertyChanged}" />
                                </Ellipse.Fill>
                              </Ellipse>
                              <Path x:Name="arrow" Data="M 0 0 L 2.5 3 L 5 0 Z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Grid.Column="1" Width="5" Visibility="Collapsed" />
                            </Grid>
                          </ControlTemplate>
                        </Button.Template>
                      </Button>
                      <TextBlock Text="{Binding Description}" AutomationProperties.AutomationId="DescriptionTextBlock" VerticalAlignment="Center" Grid.Column="2" Margin="0" />
                      <TextBlock Text="{Binding AdditionalData}" AutomationProperties.AutomationId="AdditionalDataTextBlock" VerticalAlignment="Center" Grid.Column="3" Margin="0 0 10 0" />
                    </Grid>
                    <DataTemplate.Triggers>
                      <MultiTrigger>
                        <MultiTrigger.Conditions>
                          <Condition SourceName="visibilityCheckbox" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="visibilityCheckColumn" Property="Width" Value="0" />
                      </MultiTrigger>
                      <MultiTrigger>
                        <MultiTrigger.Conditions>
                          <Condition SourceName="PART_ButtonColorChange" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="colorPickerColumn" Property="Width" Value="0" />
                      </MultiTrigger>
                    </DataTemplate.Triggers>
                  </DataTemplate>
                </ListView.ItemTemplate>
              </ListView>
              <Border Grid.Row="4" BorderBrush="{DynamicResource Orc.Brushes.Control.Default.Border}" BorderThickness="0 1 0 0" Visibility="{Binding ShowBottomToolBox, RelativeSource={RelativeSource TemplatedParent}, Converter={catel:BooleanToCollapsingVisibilityConverter}}">
                <Grid Margin="2">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <CheckBox x:Name="PART_All_Visible" AutomationProperties.AutomationId="AllVisibleCheckBox" Margin="6 0 6 0" Content="{catel:LanguageBinding Controls_ColorLegendGeneric_CheckBox_Content_CheckAll}" VerticalAlignment="Center" IsThreeState="True" IsChecked="{Binding IsAllVisible, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding ShowColorVisibilityControls, RelativeSource={RelativeSource AncestorType={x:Type local:ColorLegend}}, &#xD;&#xA;                                                            Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
                  <Grid Grid.Column="2">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition MinWidth="100" Width="*" />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <TextBlock Foreground="{DynamicResource Orc.Brushes.Control.Disabled.Border}" AutomationProperties.AutomationId="SelectedItemCountLabel" Margin="6 0 6 0" TextAlignment="Left" VerticalAlignment="Center" Text="{Binding SelectedItems.Count, ElementName=PART_List, StringFormat='Selected Items: {0}'}" />
                    <Button x:Name="PART_UnselectAll" AutomationProperties.AutomationId="UnselectAllButton" Margin="6 0 6 0" Grid.Column="1" VerticalAlignment="Center" Width="110" Content="{catel:LanguageBinding Controls_ColorLegendGeneric_Button_Content_ClearSelection}" />
                  </Grid>
                </Grid>
              </Border>
              <Popup x:Name="PART_Popup_Color_Board" IsOpen="{Binding IsColorSelecting, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" VerticalOffset="2" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="toolsContainer" Property="Visibility" Value="Collapsed" />
              </MultiTrigger.Conditions>
              <Setter TargetName="toolsContainerRow" Property="Height" Value="0" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:ColorPicker}" TargetType="{x:Type local:ColorPicker}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="MinWidth" Value="24" />
    <Setter Property="MinHeight" Value="14" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ColorPicker}">
          <Grid x:Name="grid" Background="Transparent">
            <ToggleButton x:Name="PART_ToggleDropDown" Grid.ColumnSpan="2" IsTabStop="False" ClickMode="Press" HorizontalContentAlignment="Stretch" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Height="14" Background="Transparent" BorderBrush="Transparent" BorderThickness="0">
              <ToggleButton.Template>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                  <Grid Background="Transparent">
                    <VisualStateManager.VisualStateGroups>
                      <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal" />
                        <VisualState x:Name="MouseOver">
                          <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="arrow" Storyboard.TargetProperty="Visibility">
                              <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                          </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled" />
                      </VisualStateGroup>
                      <VisualStateGroup x:Name="CheckStates">
                        <VisualState x:Name="Unchecked">
                          <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="arrow" Storyboard.TargetProperty="Visibility">
                              <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                            </ObjectAnimationUsingKeyFrames>
                          </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Checked">
                          <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="arrow" Storyboard.TargetProperty="Visibility">
                              <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                          </Storyboard>
                        </VisualState>
                      </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="14" />
                      <ColumnDefinition Width="10" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    <Path x:Name="arrow" Data="M 0 0 L 2.5 3 L 5 0 Z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Grid.Column="1" Width="5" Visibility="Hidden" />
                  </Grid>
                </ControlTemplate>
              </ToggleButton.Template>
              <ToggleButton.Content>
                <Ellipse x:Name="ColorSurface" Width="14" Height="14" Grid.Column="1">
                  <Ellipse.Fill>
                    <SolidColorBrush Color="{Binding Color, RelativeSource={RelativeSource TemplatedParent}}" />
                  </Ellipse.Fill>
                </Ellipse>
              </ToggleButton.Content>
            </ToggleButton>
            <Popup x:Name="PART_Popup" AutomationProperties.AutomationId="ColorPopup" Placement="{Binding PopupPlacement, RelativeSource={RelativeSource TemplatedParent}}" IsOpen="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:ColorBoard}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Color" Value="White" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ColorBoard}">
          <Grid x:Name="PART_RootGrid">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" AutomationProperties.AutomationId="Chrome1">
              <Grid Width="245" Height="410">
                <Grid.Resources>
                  <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}">
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="OverridesDefaultStyle" Value="True" />
                    <Setter Property="IsTabStop" Value="False" />
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                          <Border Background="Transparent" />
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                  <Style x:Key="ThumbHorizontalStyle" TargetType="{x:Type Thumb}" BasedOn="{StaticResource Orc.Styles.Control}">
                    <Setter Property="IsTabStop" Value="False" />
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                          <Grid>
                            <Rectangle x:Name="BackgroundGradient" Fill="Transparent" />
                            <Path Fill="{TemplateBinding Foreground}" Data="M 0,9 L 0,4 L 5,0 L 10,4 L 10,9 Z" VerticalAlignment="Bottom" />
                          </Grid>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                  <Style x:Key="ThumbVerticalStyle" TargetType="{x:Type Thumb}" BasedOn="{StaticResource Orc.Styles.Control}">
                    <Setter Property="IsTabStop" Value="False" />
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                          <Grid>
                            <Rectangle x:Name="BackgroundGradient" Fill="Transparent" />
                            <Path Fill="{TemplateBinding Foreground}" Data="M 0,0 L 5,5 L 0,10 Z" />
                            <Path Fill="{TemplateBinding Foreground}" Data="M 5,0 L 0,5 L 5,10 Z" HorizontalAlignment="Right" />
                          </Grid>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                  <ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
                    <Grid>
                      <Rectangle Height="10" Margin="5,0" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1">
                        <Rectangle.Fill>
                          <LinearGradientBrush StartPoint="0,0" EndPoint="5,5" SpreadMethod="Repeat" MappingMode="Absolute">
                            <GradientStop Offset="0" Color="LightGray" />
                            <GradientStop Offset="0.5" Color="LightGray" />
                            <GradientStop Offset="0.5" Color="White" />
                            <GradientStop Offset="1" Color="White" />
                          </LinearGradientBrush>
                        </Rectangle.Fill>
                      </Rectangle>
                      <Rectangle x:Name="TrackRectangle" Height="10" Margin="5,0" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
                      <Track x:Name="PART_Track">
                        <Track.DecreaseRepeatButton>
                          <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.DecreaseLarge" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                          <Thumb Style="{StaticResource ThumbHorizontalStyle}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                          <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.IncreaseLarge" />
                        </Track.IncreaseRepeatButton>
                      </Track>
                    </Grid>
                  </ControlTemplate>
                  <ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type Slider}">
                    <Grid>
                      <Rectangle Width="14" Margin="0,5" Fill="{TemplateBinding Background}" />
                      <Track x:Name="PART_Track">
                        <Track.DecreaseRepeatButton>
                          <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.DecreaseLarge" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                          <Thumb Style="{StaticResource ThumbVerticalStyle}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                          <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.IncreaseLarge" />
                        </Track.IncreaseRepeatButton>
                      </Track>
                    </Grid>
                  </ControlTemplate>
                  <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Type Slider}}">
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="Maximum" Value="10" />
                    <Setter Property="Minimum" Value="0" />
                    <Setter Property="Value" Value="0" />
                    <Setter Property="BorderBrush" Value="Black" />
                    <Setter Property="IsTabStop" Value="false" />
                    <Setter Property="Focusable" Value="false" />
                    <Setter Property="SnapsToDevicePixels" Value="true" />
                    <Setter Property="OverridesDefaultStyle" Value="true" />
                    <Style.Triggers>
                      <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="MinWidth" Value="50" />
                        <Setter Property="MinHeight" Value="10" />
                        <Setter Property="Template" Value="{StaticResource HorizontalSlider}" />
                      </Trigger>
                      <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="MinWidth" Value="10" />
                        <Setter Property="MinHeight" Value="50" />
                        <Setter Property="Template" Value="{StaticResource VerticalSlider}" />
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                  <Style x:Key="TextBoxCustomizedStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Padding" Value="2" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                          <Grid x:Name="RootElement" Background="Transparent">
                            <ScrollViewer x:Name="PART_ContentHost" Margin="0" BorderThickness="0" IsTabStop="False" />
                          </Grid>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Grid.Resources>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <TabControl Margin="2" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.TabId}" Grid.ColumnSpan="2" Padding="2 2 2 4" Background="{TemplateBinding Background}">
                  <TabItem Header="{catel:LanguageBinding Controls_ColorPickerGeneric_TabItem_Header_Colors}" FontSize="{orctheming:FontSize 9}">
                    <Grid>
                      <Grid.Resources>
                        <Style TargetType="{x:Type local:PredefinedColorItem}">
                          <Setter Property="Margin" Value="2" />
                          <Setter Property="Template">
                            <Setter.Value>
                              <ControlTemplate TargetType="{x:Type local:PredefinedColorItem}">
                                <Grid Width="40" Height="40">
                                  <!-- X mark overlay for transparent color -->
                                  <Path x:Name="XMark" Stroke="Gray" StrokeThickness="1.5" Stretch="Uniform" Margin="6" Data="M 0,0 L 100,100 M 0,100 L 100,0" />
                                  <Rectangle x:Name="RectangleColor" Width="40" Height="40" StrokeThickness="1" Stroke="{TemplateBinding BorderBrush}">
                                    <Rectangle.Fill>
                                      <SolidColorBrush Color="{Binding Color, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Rectangle.Fill>
                                  </Rectangle>
                                </Grid>
                              </ControlTemplate>
                            </Setter.Value>
                          </Setter>
                        </Style>
                        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource Orc.Styles.ListBoxItem}">
                          <Setter Property="Template">
                            <Setter.Value>
                              <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Grid Background="Transparent">
                                  <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                      <VisualState x:Name="Normal" />
                                      <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                          <ObjectAnimationUsingKeyFrames Storyboard.TargetName="brush" Storyboard.TargetProperty="Color">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Colors.LightSteelBlue}" />
                                          </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                      </VisualState>
                                      <VisualState x:Name="Disabled" />
                                      <VisualState x:Name="Selected">
                                        <Storyboard>
                                          <ObjectAnimationUsingKeyFrames Storyboard.TargetName="brush" Storyboard.TargetProperty="Color">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Colors.SteelBlue}" />
                                          </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                      </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="FocusStates">
                                      <VisualState x:Name="Focused" />
                                      <VisualState x:Name="Unfocused" />
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="ValidationStates">
                                      <VisualState x:Name="Valid" />
                                      <VisualState x:Name="InvalidUnfocused" />
                                      <VisualState x:Name="InvalidFocused" />
                                    </VisualStateGroup>
                                  </VisualStateManager.VisualStateGroups>
                                  <Border x:Name="border">
                                    <Border.Background>
                                      <SolidColorBrush x:Name="brush" Color="Transparent" />
                                    </Border.Background>
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0" />
                                  </Border>
                                </Grid>
                              </ControlTemplate>
                            </Setter.Value>
                          </Setter>
                        </Style>
                      </Grid.Resources>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Border Grid.Row="0" Background="Gray" BorderBrush="Transparent">
                        <TextBlock Text="{catel:LanguageBinding Controls_ColorPickerGeneric_TextBlock_Text_ThemeColors}" Margin="2 1" />
                      </Border>
                      <ListBox x:Name="PART_ThemeColorsListBox" Grid.Row="1" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.ThemeColorsListBoxId}" Style="{StaticResource Orc.Styles.ListBox}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" BorderThickness="0" Margin="5" Background="{TemplateBinding Background}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled">
                        <ListBox.ItemsPanel>
                          <ItemsPanelTemplate>
                            <local:WrapPanel />
                          </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                      </ListBox>
                      <Border Grid.Row="2" Background="Gray" BorderBrush="{TemplateBinding BorderBrush}">
                        <TextBlock Text="{catel:LanguageBinding Controls_ColorPickerGeneric_TextBlock_Text_RecentColors}" Margin="2 1" />
                      </Border>
                      <ListBox x:Name="PART_RecentColorsListBox" Grid.Row="3" MinHeight="45" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.RecentColorsListBoxId}" Style="{StaticResource Orc.Styles.ListBox}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" BorderThickness="0" Margin="6 5 5 5" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Disabled" Background="{TemplateBinding Background}">
                        <ListBox.ItemsPanel>
                          <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal" />
                          </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                      </ListBox>
                    </Grid>
                  </TabItem>
                  <TabItem Header="{catel:LanguageBinding Controls_ColorPickerGeneric_TabItem_Header_HSV}" FontSize="{orctheming:FontSize 10}">
                    <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <!--HSV Part-->
                      <Canvas x:Name="PART_HSVCanvas" Margin="2" Width="202" Height="202" Focusable="False">
                        <Rectangle Width="200" Height="200" Focusable="False" Stroke="Black" StrokeThickness="1" VerticalAlignment="Center" HorizontalAlignment="Center">
                          <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                              <GradientStop Color="#FFFFFFFF" Offset="0" />
                              <GradientStop x:Name="PART_HSVColorGradientStop" Color="#FFFF0000" Offset="1" />
                            </LinearGradientBrush>
                          </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="PART_HSVRectangle" Focusable="False" Width="200" Height="200" VerticalAlignment="Center" HorizontalAlignment="Center">
                          <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                              <GradientStop Color="#00000000" Offset="0" />
                              <GradientStop Color="#FF000000" Offset="1" />
                            </LinearGradientBrush>
                          </Rectangle.Fill>
                        </Rectangle>
                        <Ellipse x:Name="PART_HSVEllipse" Focusable="False" Height="8" Width="8" IsHitTestVisible="False">
                          <Ellipse.Fill>
                            <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                              <GradientStop Color="Transparent" Offset="0" />
                              <GradientStop Color="Transparent" Offset="0.25" />
                              <GradientStop Color="White" Offset="0.5" />
                              <GradientStop Color="Black" Offset="0.75" />
                              <GradientStop Color="White" Offset="1" />
                            </RadialGradientBrush>
                          </Ellipse.Fill>
                        </Ellipse>
                      </Canvas>
                      <Slider Name="PART_HSVSlider" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.HSVSliderId}" Grid.Column="1" Margin="0" Width="30" Height="202" Focusable="False" HorizontalAlignment="Stretch" IsDirectionReversed="True" Maximum="359" SmallChange="1" Orientation="Vertical" IsMoveToPointEnabled="True">
                        <Slider.Background>
                          <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Color="#FFFF0000" Offset="0.0" />
                            <GradientStop Color="#FFFFFF00" Offset="0.16666666667" />
                            <GradientStop Color="#FF00FF00" Offset="0.33333333333" />
                            <GradientStop Color="#FF00FFFF" Offset="0.5" />
                            <GradientStop Color="#FF0000FF" Offset="0.66666666667" />
                            <GradientStop Color="#FFFF00FF" Offset="0.83333333333" />
                            <GradientStop Color="#FFFF0000" Offset="1.0" />
                          </LinearGradientBrush>
                        </Slider.Background>
                      </Slider>
                      <!--RGB Part-->
                      <Grid Grid.Row="1" Grid.ColumnSpan="2">
                        <Grid.RowDefinitions>
                          <RowDefinition Height="*" />
                          <RowDefinition Height="*" />
                          <RowDefinition Height="*" />
                          <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="*" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Slider x:Name="PART_ASlider" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.ASliderId}" Grid.Row="0" Grid.Column="0" Height="20" IsMoveToPointEnabled="True" Orientation="Horizontal" Maximum="255" SmallChange="1" VerticalAlignment="Center">
                          <Slider.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                              <GradientStop x:Name="PART_A0GradientStop" Color="#00000000" Offset="0.0" />
                              <GradientStop x:Name="PART_A1GradientStop" Color="#FF000000" Offset="1.0" />
                            </LinearGradientBrush>
                          </Slider.Background>
                        </Slider>
                        <Slider x:Name="PART_RSlider" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.RSliderId}" Grid.Row="1" Grid.Column="0" Height="20" IsMoveToPointEnabled="True" Orientation="Horizontal" Maximum="255" SmallChange="1" VerticalAlignment="Center">
                          <Slider.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                              <GradientStop x:Name="PART_R0GradientStop" Color="#FF000000" Offset="0.0" />
                              <GradientStop x:Name="PART_R1GradientStop" Color="#FFFF0000" Offset="1.0" />
                            </LinearGradientBrush>
                          </Slider.Background>
                        </Slider>
                        <Slider x:Name="PART_GSlider" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.GSliderId}" Grid.Row="2" Grid.Column="0" Height="20" IsMoveToPointEnabled="True" Orientation="Horizontal" Maximum="255" SmallChange="1" VerticalAlignment="Center">
                          <Slider.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                              <GradientStop x:Name="PART_G0GradientStop" Color="#FF000000" Offset="0.0" />
                              <GradientStop x:Name="PART_G1GradientStop" Color="#FF00FF00" Offset="1.0" />
                            </LinearGradientBrush>
                          </Slider.Background>
                        </Slider>
                        <Slider x:Name="PART_BSlider" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.BSliderId}" Grid.Row="3" Grid.Column="0" Height="20" IsMoveToPointEnabled="True" Orientation="Horizontal" Maximum="255" SmallChange="1" VerticalAlignment="Center">
                          <Slider.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                              <GradientStop x:Name="PART_B0GradientStop" Color="#FF000000" Offset="0.0" />
                              <GradientStop x:Name="PART_B1GradientStop" Color="#FF0000FF" Offset="1.0" />
                            </LinearGradientBrush>
                          </Slider.Background>
                        </Slider>
                        <TextBox x:Name="PART_ATextBox" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.AEditId}" Grid.Row="0" Grid.Column="1" Margin="0 2 0 0" BorderThickness="0" Height="20" Width="24" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        <TextBox x:Name="PART_RTextBox" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.REditId}" Grid.Row="1" Grid.Column="1" Margin="0 2 0 0" BorderThickness="0" Height="20" Width="24" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        <TextBox x:Name="PART_GTextBox" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.GEditId}" Grid.Row="2" Grid.Column="1" Margin="0 2 0 0" BorderThickness="0" Height="20" Width="24" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        <TextBox x:Name="PART_BTextBox" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.BEditId}" Grid.Row="3" Grid.Column="1" Margin="0 2 0 0" BorderThickness="0" Height="20" Width="24" VerticalAlignment="Center" HorizontalAlignment="Center" />
                      </Grid>
                    </Grid>
                  </TabItem>
                </TabControl>
                <Grid Grid.Row="1" Grid.ColumnSpan="2" Height="35" HorizontalAlignment="Stretch" VerticalAlignment="Center">
                  <ComboBox x:Name="PART_ColorComboBox" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.ColorComboBoxId}" Height="30" Margin="2" HorizontalContentAlignment="Left" VerticalAlignment="Center" HorizontalAlignment="Stretch" />
                  <StackPanel Orientation="Horizontal" Margin="4,0,0,0" HorizontalAlignment="Stretch">
                    <Rectangle x:Name="RectangleColor" Width="28" Height="20" Stroke="Black" StrokeThickness="1">
                      <Rectangle.Fill>
                        <SolidColorBrush x:Name="PART_ColorBrush" Color="White" />
                      </Rectangle.Fill>
                    </Rectangle>
                    <TextBox x:Name="PART_ColorTextBox" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.ColorEditId}" TextOptions.TextRenderingMode="ClearType" Margin="2,0" Height="20" Width="88" Style="{StaticResource TextBoxCustomizedStyle}" />
                  </StackPanel>
                </Grid>
                <Grid Grid.Row="2" Grid.ColumnSpan="2">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Button x:Name="PART_CancelButton" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.CancelButtonId}" Grid.Column="0" Height="auto" Margin="2 0 2 2" Content="{catel:LanguageBinding Controls_ColorPickerGeneric_Button_Content_Cancel}" />
                  <Button x:Name="PART_SelectButton" AutomationProperties.AutomationId="{x:Static automation:ColorBoardMap.SelectButtonId}" Grid.Column="1" Height="auto" Margin="0 0 2 2" Content="{catel:LanguageBinding Controls_ColorPickerGeneric_Button_Content_Select}" />
                </Grid>
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.ColorBoard" TargetType="{x:Type local:ColorBoard}" BasedOn="{StaticResource {x:Type local:ColorBoard}}" />
  <Style x:Key="{x:Type local:DateTimePicker}" TargetType="{x:Type local:DateTimePicker}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <converters:YearLongToYearShortConverter x:Key="YearLongToYearShortConverter" />
      <converters:Hour24ToHour12Converter x:Key="Hour24ToHour12Converter" />
      <converters:AmPmLongToAmPmShortConverter x:Key="AmPmLongToAmPmShortConverter" />
      <Style x:Key="SeparatorTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
      </Style>
      <Style x:Key="DateTimePickerLettersToggleButtonStyle" BasedOn="{x:Null}" TargetType="{x:Type ToggleButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter.Resources>
                  <Style TargetType="{x:Type TextBlock}">
                    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
                    <Style.Triggers>
                      <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </ContentPresenter.Resources>
              </ContentPresenter>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <DrawingBrush x:Key="CheckersBrush" Viewport="0,0,0.25,0.25" TileMode="Tile">
        <DrawingBrush.Drawing>
          <DrawingGroup>
            <GeometryDrawing Brush="{DynamicResource Orc.Brushes.Control.Default.Background}">
              <GeometryDrawing.Geometry>
                <RectangleGeometry Rect="0,0,1,1" />
              </GeometryDrawing.Geometry>
            </GeometryDrawing>
            <GeometryDrawing Brush="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" Geometry="M 0,0 L0,0.5 0.5,0.5 0.5,1 1,1 1,0.5 0.5,0.5 0.5,0" />
          </DrawingGroup>
        </DrawingBrush.Drawing>
      </DrawingBrush>
      <Style x:Key="BaseStyle" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Margin" Value="2 0 0 0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="MinWidth" Value="11" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="CaretBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
        <Style.Triggers>
          <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
              <Condition Binding="{Binding Path=Text, RelativeSource={RelativeSource Self}}" Value="{StaticResource Empty}" />
              <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:DateTimePicker}}, Path=IsMouseOver}" Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter Property="Background" Value="{StaticResource CheckersBrush}" />
            <Setter Property="BorderThickness" Value="0 0 0 2" />
            <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
          </MultiDataTrigger>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style TargetType="{x:Type local:NumericTextBox}" BasedOn="{StaticResource BaseStyle}" />
      <Style TargetType="{x:Type local:ListTextBox}" BasedOn="{StaticResource BaseStyle}" />
    </Style.Resources>
    <Setter Property="local:EnterKeyTraversal.IsEnabled" Value="True" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:DateTimePicker}">
          <Grid x:Name="PART_MainGrid">
            <Border x:Name="MainBorder" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
              <Grid MinWidth="115">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <local:NumericTextBox x:Name="PART_DaysNumericTextBox" Grid.Column="0" MinValue="1" IsReadOnly="{TemplateBinding IsReadOnly}" />
                  <TextBlock x:Name="PART_DaysMonthsSeparatorTextBlock" Grid.Column="1" Style="{StaticResource SeparatorTextBlockStyle}" Text="/" />
                  <ToggleButton x:Name="PART_DaysToggleButton" Grid.Column="1" Tag="{x:Static local:DateTimePart.Day}" Style="{DynamicResource DateTimePickerLettersToggleButtonStyle}" Content="{catel:LanguageBinding Controls_DatePicker_ToggleButton_Content_DayAbbreviation}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                  <local:NumericTextBox x:Name="PART_MonthNumericTextBox" Grid.Column="2" MinValue="1" MaxValue="12" IsReadOnly="{TemplateBinding IsReadOnly}" />
                  <TextBlock x:Name="PART_MonthsYearSeparatorTextBlock" Grid.Column="3" Style="{StaticResource SeparatorTextBlockStyle}" Text="/" />
                  <ToggleButton x:Name="PART_MonthToggleButton" Grid.Column="3" Tag="{x:Static local:DateTimePart.Month}" Style="{DynamicResource DateTimePickerLettersToggleButtonStyle}" Content="{catel:LanguageBinding Controls_DatePicker_ToggleButton_Content_MonthAbbreviation}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                  <local:NumericTextBox x:Name="PART_YearNumericTextBox" Grid.Column="4" MinValue="1" MaxValue="3000" IsReadOnly="{TemplateBinding IsReadOnly}" />
                  <TextBlock x:Name="PART_YearSeparatorTextBlock" Grid.Column="5" Style="{StaticResource SeparatorTextBlockStyle}" Text="" />
                  <ToggleButton x:Name="PART_YearToggleButton" Grid.Column="5" Tag="{x:Static local:DateTimePart.Year}" Content="{catel:LanguageBinding Controls_DatePicker_ToggleButton_Content_YearAbbreviation}" Style="{DynamicResource DateTimePickerLettersToggleButtonStyle}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                  <local:NumericTextBox x:Name="PART_HourNumericTextBox" Grid.Column="6" Format="00" MaxValue="23" MinValue="0" IsReadOnly="{TemplateBinding IsReadOnly}" />
                  <TextBlock x:Name="PART_HourMinuteSeparatorTextBlock" Grid.Column="7" Style="{StaticResource SeparatorTextBlockStyle}" Text=":" />
                  <ToggleButton Grid.Column="7" x:Name="PART_HourToggleButton" Tag="{x:Static local:DateTimePart.Hour}" Style="{DynamicResource DateTimePickerLettersToggleButtonStyle}" Content="{catel:LanguageBinding Controls_DateTimePicker_ToggleButton_Content_HourAbbreviation}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                  <local:NumericTextBox x:Name="PART_MinuteNumericTextBox" Grid.Column="8" Format="00" MaxValue="59" MinValue="00" IsReadOnly="{TemplateBinding IsReadOnly}" />
                  <TextBlock x:Name="PART_MinuteSecondSeparatorTextBlock" Grid.Column="9" Style="{StaticResource SeparatorTextBlockStyle}" Text=":" />
                  <ToggleButton Grid.Column="9" x:Name="PART_MinuteToggleButton" Tag="{x:Static local:DateTimePart.Minute}" Style="{DynamicResource DateTimePickerLettersToggleButtonStyle}" Content="{catel:LanguageBinding Controls_DateTimePicker_ToggleButton_Content_MinuteAbbreviation}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                  <local:NumericTextBox x:Name="PART_SecondNumericTextBox" Grid.Column="10" Format="00" MaxValue="59" MinValue="0" IsReadOnly="{TemplateBinding IsReadOnly}" />
                  <TextBlock x:Name="PART_SecondAmPmSeparatorTextBlock" Grid.Column="11" Style="{StaticResource SeparatorTextBlockStyle}" Text="" />
                  <ToggleButton x:Name="PART_SecondToggleButton" Grid.Column="11" Tag="{x:Static local:DateTimePart.Second}" Content="{catel:LanguageBinding Controls_DateTimePicker_ToggleButton_Content_SecondAbbreviation}" Style="{DynamicResource DateTimePickerLettersToggleButtonStyle}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                  <local:ListTextBox x:Name="PART_AmPmListTextBox" Grid.Column="12" VerticalAlignment="Center" VerticalContentAlignment="Center" IsReadOnly="{TemplateBinding IsReadOnly}" />
                  <TextBlock x:Name="PART_AmPmSeparatorTextBlock" Grid.Column="13" Style="{StaticResource SeparatorTextBlockStyle}" Text="" />
                  <ToggleButton x:Name="PART_AmPmToggleButton" Grid.Column="13" Tag="{x:Static local:DateTimePart.AmPmDesignator}" Content="{catel:LanguageBinding Controls_DateTimePicker_ToggleButton_Content_AmPmAbbreviation}" Style="{DynamicResource DateTimePickerLettersToggleButtonStyle}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                </Grid>
                <Grid Grid.Column="1">
                  <local:DropDownButton x:Name="PART_DatePickerIconDropDownButton" DockPanel.Dock="Right" IsArrowVisible="False" KeyboardNavigation.TabIndex="30" Margin="2 0 2 0" Height="19" Width="19" VerticalAlignment="Stretch">
                    <local:DropDownButton.DropDown>
                      <ContextMenu>
                        <MenuItem x:Name="PART_TodayMenuItem" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" BorderThickness="0" Margin="0" Header="{catel:LanguageBinding Controls_DatePicker_Button_Content_Today}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                        <MenuItem x:Name="PART_NowMenuItem" Visibility="{TemplateBinding HideTime, Converter={catel:BooleanToCollapsingVisibilityConverter}, ConverterParameter=TRUE}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" BorderThickness="0" Margin="0" Header="{catel:LanguageBinding Controls_DateTimePicker_Button_Content_Now}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                        <MenuItem x:Name="PART_SelectDateMenuItem" Header="{catel:LanguageBinding Controls_DatePicker_Button_Content_SelectDate}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" BorderThickness="0" Margin="0" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                        <MenuItem x:Name="PART_SelectTimeMenuItem" Visibility="{TemplateBinding HideTime, Converter={catel:BooleanToCollapsingVisibilityConverter}, ConverterParameter=TRUE}" Header="{catel:LanguageBinding Controls_DateTimePicker_Button_Content_SelectTime}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" BorderThickness="0" Margin="0" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" />
                        <Separator Visibility="{TemplateBinding AllowNull, Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
                        <MenuItem x:Name="PART_ClearMenuItem" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" BorderThickness="0" Margin="0" Header="{catel:LanguageBinding Controls_DatePicker_Button_Content_Clear}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" Visibility="{TemplateBinding AllowNull, Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
                        <Separator Visibility="{TemplateBinding AllowCopyPaste, Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
                        <MenuItem x:Name="PART_CopyMenuItem" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" BorderThickness="0" Margin="0" Header="{catel:LanguageBinding Controls_DatePicker_Button_Content_Copy}" Visibility="{TemplateBinding AllowCopyPaste, Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
                        <MenuItem x:Name="PART_PasteMenuItem" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" BorderThickness="0" Margin="0" Header="{catel:LanguageBinding Controls_DatePicker_Button_Content_Paste}" IsEnabled="{TemplateBinding IsReadOnly, Converter={catel:BooleanToOppositeBooleanConverter}}" Visibility="{TemplateBinding AllowCopyPaste, Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
                      </ContextMenu>
                    </local:DropDownButton.DropDown>
                    <Grid VerticalAlignment="Stretch">
                      <Border Grid.Row="0" Background="{TemplateBinding BorderBrush}" Height="4" VerticalAlignment="Top" />
                      <Ellipse Grid.Row="0" Width="3" Height="3" Fill="{TemplateBinding Background}" VerticalAlignment="Top" />
                      <TextBlock Text="{Binding Source={x:Static sys:DateTime.Today}, StringFormat=' d '}" Margin="0 3 0 0" FontSize="{orctheming:FontSize 10}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                  </local:DropDownButton>
                </Grid>
              </Grid>
            </Border>
            <Popup x:Name="PART_CalendarPopup" AutomationProperties.AutomationId="CalendarPopupId" PlacementTarget="{Binding ElementName=PART_MainGrid}" Placement="Bottom" VerticalOffset="-4" StaysOpen="False">
              <Calendar x:Name="PART_Calendar" AutomationProperties.AutomationId="CalendarId" Margin="0 -3 0 -3" />
            </Popup>
            <Popup x:Name="PART_TimePickerPopup" PlacementTarget="{Binding ElementName=PART_MainGrid}" Placement="Bottom" VerticalOffset="0" StaysOpen="False">
              <Border BorderBrush="LightGray" BorderThickness="3">
                <DockPanel Background="{TemplateBinding Background}">
                  <local:TimePicker x:Name="PART_TimePicker" Background="Transparent" BorderThickness="5" HourTickBrush="Black" HourThickness="5" MinuteTickBrush="DarkGray" MinuteThickness="4" MinHeight="180" MinWidth="180" AmPmValue="{Binding Path=AmPmValue, RelativeSource={RelativeSource AncestorType={x:Type local:DateTimePicker}}, Mode=TwoWay}" TimeValue="{Binding Path=TimeValue, RelativeSource={RelativeSource AncestorType={x:Type local:DateTimePicker}}, Mode=TwoWay}" />
                </DockPanel>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
              <Setter TargetName="PART_DatePickerIconDropDownButton" Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.DropDownButton" TargetType="{x:Type local:DropDownButton}" BasedOn="{StaticResource Orc.Styles.ToggleButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource Orc.Styles.Control.Inside.FocusVisual}" />
    <!--<Setter Property="IsTabStop" Value="False" />
        <Setter Property="ClickMode" Value="Press" />-->
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:DropDownButton}">
          <Grid x:Name="ChromeGrid" Background="{DynamicResource Orc.Brushes.Control.Background}">
            <Border x:Name="Chrome" AutomationProperties.AutomationId="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
              <DockPanel HorizontalAlignment="Stretch" LastChildFill="True">
                <Grid x:Name="PathGrid" VerticalAlignment="Stretch" IsHitTestVisible="True" Visibility="{TemplateBinding IsArrowVisible, Converter={catel:BooleanToCollapsingVisibilityConverter}}" Margin="{TemplateBinding ArrowMargin}" HorizontalAlignment="Stretch" DockPanel.Dock="{TemplateBinding ArrowLocation, Converter={local:DropdownArrowLocationConverter}}">
                  <Border x:Name="PART_ArrowBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" BorderThickness="0">
                    <Path x:Name="PART_Arrow" Data="M0,0L3.5,4 7,0z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center" />
                  </Border>
                </Grid>
                <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                  <ContentPresenter x:Name="contentPresenter" Focusable="False" Visibility="{TemplateBinding Command, Converter={catel:ReferenceToCollapsingVisibilityConverter SupportInversionUsingCommandParameter=True}, ConverterParameter=True}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                  <Button Command="{TemplateBinding Command}" Height="NaN" BorderThickness="1" Margin="-1" CommandParameter="{TemplateBinding CommandParameter}" Visibility="{TemplateBinding Command, Converter={catel:ReferenceToCollapsingVisibilityConverter}}" Content="{TemplateBinding Content}" />
                </Grid>
              </DockPanel>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="ToggleButton.Background" Value="{DynamicResource Orc.Brushes.Control.Highlighted.Background}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type local:DropDownButton}" TargetType="{x:Type local:DropDownButton}" BasedOn="{StaticResource Orc.Styles.DropDownButton}">
    <!-- Just a forwarder -->
  </Style>
  <Style x:Key="{x:Type local:Expander}" TargetType="{x:Type local:Expander}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <Geometry x:Key="ExpanderUpArrow">M 1,4.5  L 4.5,1  L 8,4.5</Geometry>
      <Geometry x:Key="ExpanderDownArrow">M 1,1.5 L 4.5,5 L 8,1.5</Geometry>
      <Geometry x:Key="ExpanderLeftArrow">M 4.5,8 L 1,4.5 L 4.5,1</Geometry>
      <Geometry x:Key="ExpanderRightArrow">M 1.5,8 L 5,4.5 L 1,1.5</Geometry>
      <Style x:Key="ExpanderHeaderToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Orc.Styles.ButtonBase}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <Border x:Name="Chrome" AutomationProperties.AutomationId="Chrome" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup Name="CommonStates">
                    <VisualState Name="Unchecked">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="RotateTransform" Storyboard.TargetProperty="Angle" From="180" To="0" Duration="0:0:0.3" />
                      </Storyboard>
                    </VisualState>
                    <VisualState Name="Checked">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="RotateTransform" Storyboard.TargetProperty="Angle" From="0" To="180" Duration="0:0:0.25" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Grid Background="Transparent" SnapsToDevicePixels="False">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="16" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <Grid>
                    <Grid.LayoutTransform>
                      <TransformGroup>
                        <TransformGroup.Children>
                          <TransformCollection>
                            <RotateTransform x:Name="RotateTransform" Angle="0" />
                          </TransformCollection>
                        </TransformGroup.Children>
                      </TransformGroup>
                    </Grid.LayoutTransform>
                    <Path x:Name="arrow" Data="{TemplateBinding Path.Data}" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" VerticalAlignment="Center" />
                  </Grid>
                  <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Margin="0" Grid.Column="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                  <Setter TargetName="Chrome" Property="Control.Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
                  <Setter TargetName="Chrome" Property="Control.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
                  <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="True">
                  <Setter TargetName="Chrome" Property="ButtonBase.Background" Value="{DynamicResource Orc.Brushes.Control.Pressed.Background}" />
                  <Setter TargetName="Chrome" Property="ButtonBase.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Pressed.Border}" />
                  <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.Pressed.Foreground}" />
                </Trigger>
                <Trigger Property="Control.IsEnabled" Value="False">
                  <Setter TargetName="Chrome" Property="Control.Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
                  <Setter TargetName="Chrome" Property="Control.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
                  <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:Expander}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <DockPanel>
              <Border x:Name="PART_HeaderSiteBorder" Background="Transparent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <ToggleButton x:Name="HeaderSite" AutomationProperties.AutomationId="HeaderSiteToggleButton" Style="{StaticResource ExpanderHeaderToggleButtonStyle}" BorderThickness="{TemplateBinding BorderThickness}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
              </Border>
              <ContentPresenter x:Name="PART_ExpandSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="false" />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ExpandDirection" Value="Down">
              <Setter Property="DockPanel.Dock" TargetName="PART_ExpandSite" Value="Top" />
              <Setter Property="DockPanel.Dock" TargetName="PART_HeaderSiteBorder" Value="Bottom" />
              <Setter Property="Path.Data" TargetName="HeaderSite" Value="{StaticResource ExpanderDownArrow}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter Property="DockPanel.Dock" TargetName="PART_ExpandSite" Value="Bottom" />
              <Setter Property="DockPanel.Dock" TargetName="PART_HeaderSiteBorder" Value="Top" />
              <Setter Property="Path.Data" TargetName="HeaderSite" Value="{StaticResource ExpanderUpArrow}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter Property="DockPanel.Dock" TargetName="PART_ExpandSite" Value="Left" />
              <Setter Property="DockPanel.Dock" TargetName="PART_HeaderSiteBorder" Value="Right" />
              <Setter Property="Path.Data" TargetName="HeaderSite" Value="{StaticResource ExpanderRightArrow}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter Property="DockPanel.Dock" TargetName="PART_ExpandSite" Value="Right" />
              <Setter Property="DockPanel.Dock" TargetName="PART_HeaderSiteBorder" Value="Left" />
              <Setter Property="Path.Data" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftArrow}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Visibility" TargetName="PART_ExpandSite" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:FilterBox}" TargetType="{x:Type local:FilterBox}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}">
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:FilterBox}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="PART_WatermarkHost" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Watermark}" IsHitTestVisible="False" Visibility="Collapsed">
                <ContentPresenter.Resources>
                  <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
                  </Style>
                </ContentPresenter.Resources>
              </ContentPresenter>
              <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" BorderThickness="0" IsTabStop="False" Background="{x:Null}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{TemplateBinding Foreground}" />
              <Button x:Name="PART_ClearButton" BorderThickness="0" Margin="0" Height="NaN" Foreground="{TemplateBinding Foreground}" Grid.Column="1" Width="18" DockPanel.Dock="Right" Visibility="{Binding Path=IsEnabled, Converter={catel:BooleanToCollapsingVisibilityConverter}, RelativeSource={RelativeSource Self}}">
                <Path x:Name="Path" Data="M0,1.05 L1.05,0 8.33,7.26 15.55,0.0 16.6,1.0 9.3,8.3 16.6,15.55 15.55,16.6 8.3,9.3 1,16.6 0,15.6 7.3,8.3 z" Fill="{TemplateBinding Foreground}" Margin="4" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center" />
              </Button>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsFocused" Value="False" />
                <Condition Property="Text" Value="" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="PART_WatermarkHost" Property="Visibility" Value="Visible" />
              </MultiTrigger.Setters>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:FluidProgressBar}" TargetType="{x:Type local:FluidProgressBar}">
    <Style.Resources>
      <ExponentialEase x:Key="ProgressBarEaseOut" EasingMode="EaseOut" Exponent="2" />
      <ExponentialEase x:Key="ProgressBarEaseIn" EasingMode="EaseIn" Exponent="2" />
      <Storyboard x:Key="FluidStoryboard" RepeatBehavior="Forever" AutoReverse="False" Duration="00:00:04.4">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.0" Storyboard.TargetProperty="X" Storyboard.TargetName="TransDot1">
          <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0.0" />
          <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value="0.0" EasingFunction="{StaticResource ProgressBarEaseOut}" />
          <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value="0.0" />
          <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="0.0" EasingFunction="{StaticResource ProgressBarEaseIn}" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.1" Storyboard.TargetProperty="X" Storyboard.TargetName="TransDot2">
          <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0.1" />
          <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value="300.1" EasingFunction="{StaticResource ProgressBarEaseOut}" />
          <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value="500.1" />
          <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="800.1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.2" Storyboard.TargetProperty="X" Storyboard.TargetName="TransDot3">
          <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0.1" />
          <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value="300.1" EasingFunction="{StaticResource ProgressBarEaseOut}" />
          <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value="500.1" />
          <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="800.1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.3" Storyboard.TargetProperty="X" Storyboard.TargetName="TransDot4">
          <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0.1" />
          <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value="300.1" EasingFunction="{StaticResource ProgressBarEaseOut}" />
          <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value="500.1" />
          <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="800.1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.4" Storyboard.TargetProperty="X" Storyboard.TargetName="TransDot5">
          <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0.1" />
          <EasingDoubleKeyFrame KeyTime="00:00:00.5" Value="300.1" EasingFunction="{StaticResource ProgressBarEaseOut}" />
          <LinearDoubleKeyFrame KeyTime="00:00:02.0" Value="500.1" />
          <EasingDoubleKeyFrame KeyTime="00:00:02.5" Value="800.1" EasingFunction="{StaticResource ProgressBarEaseIn}" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Dot1">
          <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
          <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Dot2">
          <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
          <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Dot3">
          <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
          <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.3" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Dot4">
          <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
          <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Dot5">
          <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
          <DiscreteDoubleKeyFrame KeyTime="00:00:02.5" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </Style.Resources>
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:FluidProgressBar}">
          <Canvas x:Name="PART_Canvas">
            <Rectangle x:Name="PART_Dot1" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Width="{Binding Path=DotWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Height="{Binding Path=DotHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusX="{Binding Path=DotRadiusX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusY="{Binding Path=DotRadiusY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Opacity="1">
              <Rectangle.CacheMode>
                <BitmapCache EnableClearType="False" RenderAtScale="1" SnapsToDevicePixels="False" />
              </Rectangle.CacheMode>
            </Rectangle>
            <Rectangle x:Name="PART_Dot2" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Width="{Binding Path=DotWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Height="{Binding Path=DotHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusX="{Binding Path=DotRadiusX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusY="{Binding Path=DotRadiusY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Opacity="1">
              <Rectangle.CacheMode>
                <BitmapCache EnableClearType="False" RenderAtScale="1" SnapsToDevicePixels="False" />
              </Rectangle.CacheMode>
            </Rectangle>
            <Rectangle x:Name="PART_Dot3" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Width="{Binding Path=DotWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Height="{Binding Path=DotHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusX="{Binding Path=DotRadiusX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusY="{Binding Path=DotRadiusY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Opacity="1">
              <Rectangle.CacheMode>
                <BitmapCache EnableClearType="False" RenderAtScale="1" SnapsToDevicePixels="False" />
              </Rectangle.CacheMode>
            </Rectangle>
            <Rectangle x:Name="PART_Dot4" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Width="{Binding Path=DotWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Height="{Binding Path=DotHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusX="{Binding Path=DotRadiusX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusY="{Binding Path=DotRadiusY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Opacity="1">
              <Rectangle.CacheMode>
                <BitmapCache EnableClearType="False" RenderAtScale="1" SnapsToDevicePixels="False" />
              </Rectangle.CacheMode>
            </Rectangle>
            <Rectangle x:Name="PART_Dot5" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Width="{Binding Path=DotWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" Height="{Binding Path=DotHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusX="{Binding Path=DotRadiusX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" RadiusY="{Binding Path=DotRadiusY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:FluidProgressBar}}}" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Opacity="1">
              <Rectangle.CacheMode>
                <BitmapCache EnableClearType="False" RenderAtScale="1" SnapsToDevicePixels="False" />
              </Rectangle.CacheMode>
            </Rectangle>
          </Canvas>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:FontImageControl}" TargetType="{x:Type local:FontImageControl}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Margin="{TemplateBinding Padding}">
            <Image x:Name="PART_Image" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:HeaderBar}" TargetType="{x:Type local:HeaderBar}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="0">
            <TextBlock FontWeight="Medium" Foreground="{TemplateBinding Foreground}" FontSize="{orctheming:FontSize 14}" Margin="4" TextAlignment="Left" Text="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:LinkLabel}" TargetType="{x:Type local:LinkLabel}" BasedOn="{StaticResource {x:Type Label}}">
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.AccentColor80}" />
    <Setter Property="HoverForeground" Value="{DynamicResource Orc.Brushes.AccentColor}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HyperlinkStyle">
      <Setter.Value>
        <Style TargetType="{x:Type Hyperlink}">
          <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
          <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HoverForeground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
            </Trigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:LinkLabel}">
          <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="true">
            <TextBlock Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <Hyperlink x:Name="PART_InnerHyperlink" NavigateUri="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=Url}" Style="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=HyperlinkStyle}" Command="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=Command}" CommandParameter="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=CommandParameter}" CommandTarget="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=CommandTarget}">
                <local:BindableRun BoundText="{Binding RelativeSource= {RelativeSource TemplatedParent}, Path=Content}" />
              </Hyperlink>
            </TextBlock>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="LinkLabelBehavior" Value="NeverUnderline">
              <Setter TargetName="PART_InnerHyperlink" Property="TextDecorations" Value="None" />
            </Trigger>
            <Trigger Property="LinkLabelBehavior" Value="AlwaysUnderline">
              <Setter TargetName="PART_InnerHyperlink" Property="TextDecorations" Value="Underline" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="true" />
                <Condition Property="LinkLabelBehavior" Value="HoverUnderline" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_InnerHyperlink" Property="TextDecorations" Value="Underline" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="false" />
                <Condition Property="LinkLabelBehavior" Value="HoverUnderline" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_InnerHyperlink" Property="TextDecorations" Value="None" />
            </MultiTrigger>
            <Trigger SourceName="PART_InnerHyperlink" Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foregound}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foregound}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:ListTextBox}" TargetType="{x:Type local:ListTextBox}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ListTextBox}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" BorderThickness="0" IsTabStop="False" Background="{x:Null}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{TemplateBinding Foreground}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:LogViewerControl}" TargetType="{x:Type local:LogViewerControl}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="InfoMessageBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
    <Setter Property="DebugMessageBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
    <Setter Property="WarningMessageBrush" Value="DarkOrange" />
    <Setter Property="ErrorMessageBrush" Value="Red" />
    <Style.Resources>
      <Style TargetType="{x:Type local:RichTextBoxParagraph}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="FontFamily" Value="Consolas" />
      </Style>
      <Geometry x:Key="OctagonGeometry">M15.73,3L21,8.27L21,15.73L15.73,21L8.27,21L3,15.73L3,8.27L8.27,3L15.73,3ZM14.9,5L9.1,5L5,9.1L5,14.9L9.1,19L14.9,19L19,14.9L19,9.1L14.9,5ZM11,17L13,17L13,11L11,11L11,17ZM11,9L13,9L13,7L11,7L11,9Z</Geometry>
      <Geometry x:Key="RectngleGeometry">M4,2L20,2C21.1,2 22,2.9 22,4L22,20C22,21.1 21.1,22 20,22L4,22C2.9,22 2,21.1 2,20L2,4C2,2.9 2.9,2 4,2ZM4,4L4,20L20,20L20,4L4,4ZM13,15L11,15L11,17L13,17L13,15ZM13,7L11,7L11,13L13,13L13,7Z</Geometry>
      <Geometry x:Key="TriangleGeometry">M2,21.9997L12,2.00026L20.6247,19.2199L20.6291,19.2199L22,21.9997L22,21.9997L22,21.9997L2,21.9997ZM5.0287,19.9997L18.9638,19.9997L12,6.11526L5.0287,19.9997ZM12.9376,16.5456L11.2947,16.5456L11.2947,18.2081L12.9376,18.2081L12.9376,16.5456ZM12.9376,11.5581L11.2947,11.5581L11.2947,14.8831L12.9376,14.8831L12.9376,11.5581Z</Geometry>
      <Geometry x:Key="EllipseGeometry">M11,9L13,9L13,7L11,7M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2C6.51416,2 2,6.51416 2,12C2,17.4858 6.51416,22 12,22C17.4858,22 22,17.4858 22,12C22,6.51416 17.4858,2 12,2M11,17L13,17L13,11L11,11L11,17Z</Geometry>
      <Style TargetType="{x:Type Label}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Label}">
              <Grid Margin="0 0 6 0">
                <Viewbox x:Name="Viewbox" Height="9" Width="9">
                  <Path Data="{TemplateBinding Path.Data}" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" Margin="0" SnapsToDevicePixels="True" Stretch="Fill" UseLayoutRounding="True" VerticalAlignment="Center" />
                </Viewbox>
              </Grid>
              <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding LogEvent}" Value="Info">
                  <Setter Property="BorderBrush" Value="RoyalBlue" />
                  <Setter Property="Path.Data" Value="{StaticResource EllipseGeometry}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding LogEvent}" Value="Error">
                  <Setter Property="BorderBrush" Value="Red" />
                  <Setter Property="Path.Data" Value="{StaticResource TriangleGeometry}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding LogEvent}" Value="Warning">
                  <Setter Property="BorderBrush" Value="DarkOrange" />
                  <Setter Property="Path.Data" Value="{StaticResource RectngleGeometry}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding LogEvent}" Value="Debug">
                  <Setter Property="BorderBrush" Value="DarkGray" />
                  <Setter Property="Path.Data" Value="{StaticResource OctagonGeometry}" />
                </DataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
  </Style>
  <Style x:Key="{x:Type local:NumericTextBox}" TargetType="{x:Type local:NumericTextBox}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:NumericTextBox}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}" BorderThickness="0" IsTabStop="False" Background="{x:Null}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{TemplateBinding Foreground}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:NumericUpDown}" TargetType="{x:Type local:NumericUpDown}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:NumericUpDown}">
          <Grid>
            <Border x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="False" HorizontalAlignment="Stretch">
              <Grid Focusable="False">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TextBox x:Name="PART_TextBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" BorderThickness="0" Margin="0" Padding="2 4 2 4">
                  <xamlbehaviors:Interaction.Behaviors>
                    <catel:NumericTextBox />
                  </xamlbehaviors:Interaction.Behaviors>
                </TextBox>
                <local:SpinButton x:Name="PART_SpinButton" Grid.Column="1" HorizontalAlignment="Right" Margin="-1" BorderBrush="{Binding ElementName=Chrome, Path=BorderBrush}" Focusable="True" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Control.IsMouseOver" Value="True">
              <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
              <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
            </Trigger>
            <Trigger Property="Control.IsEnabled" Value="False">
              <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
              <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
            </Trigger>
            <Trigger SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="true">
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Focus.Border}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:PinnableToolTip}" TargetType="{x:Type local:PinnableToolTip}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <Geometry x:Key="CloseGeometry">M384,415.819L248.839,550.98L217.02,519.161L352.181,384L217.02,248.839L248.839,217.02L384,352.181L519.161,217.02L550.98,248.839L415.819,384L550.98,519.161L519.161,550.98L384,415.819Z</Geometry>
      <Geometry x:Key="PinnedGeometry">M271.481,217.02L496.519,217.02C498.998,233.046 480.395,252.6 456.338,257.019L461.359,337.306C499.288,346.952 513.621,378.883 511.94,397.774L401.232,397.356L400.802,493.955L384,550.98L367.198,493.953L366.768,397.356L256.06,397.774C254.379,378.883 268.712,346.952 306.641,337.306L311.662,257.019C287.605,252.6 269.002,233.046 271.481,217.02Z</Geometry>
      <Geometry x:Key="UnpinnedGeometry">M550.98,271.481L550.98,496.519C534.954,498.998 515.4,480.395 510.981,456.338L430.694,461.359C421.048,499.288 389.117,513.621 370.226,511.94L370.644,401.232L274.045,400.802L217.02,384L274.047,367.198L370.644,366.768L370.226,256.06C389.117,254.379 421.048,268.712 430.694,306.641L510.981,311.662C515.4,287.605 534.954,269.002 550.98,271.481Z</Geometry>
    </Style.Resources>
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:PinnableToolTip}">
          <Border x:Name="Root" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Border BorderThickness="0 0 0 1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Border x:Name="PART_DragGrip" AutomationProperties.AutomationId="PART_DragGrip" Margin="3 2 2 0" Height="12" Padding="2" VerticalAlignment="Center">
                    <Border.Background>
                      <DrawingBrush TileMode="Tile" Viewport="0 0 3 3" ViewportUnits="Absolute" Viewbox="0 0 3 3" ViewboxUnits="Absolute">
                        <DrawingBrush.Drawing>
                          <DrawingGroup>
                            <GeometryDrawing x:Name="PART_GripDrawing" Brush="{DynamicResource Orc.Brushes.Control.Disabled.Border}">
                              <GeometryDrawing.Geometry>
                                <RectangleGeometry Rect="0 0 1 1" />
                              </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                          </DrawingGroup>
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Border.Background>
                  </Border>
                  <ToggleButton x:Name="PART_PinButton" Grid.Column="1" Margin="1" BorderThickness="0" IsChecked="{Binding IsPinned, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                    <Grid Background="Transparent" Height="14" Width="14">
                      <Viewbox Height="9" Width="9">
                        <Path x:Name="PinPath" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill" UseLayoutRounding="True" Margin="0" SnapsToDevicePixels="True" Data="{StaticResource UnpinnedGeometry}" Fill="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Foreground}" />
                      </Viewbox>
                    </Grid>
                  </ToggleButton>
                  <Button x:Name="PART_CloseButton" Grid.Column="2" Margin="1" BorderThickness="0" Visibility="{Binding AllowCloseByUser, RelativeSource={RelativeSource TemplatedParent}, Converter={catel:BooleanToCollapsingVisibilityConverter}}">
                    <Grid Background="Transparent" Height="14" Width="14">
                      <Viewbox Height="9" Width="9">
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill" UseLayoutRounding="True" Margin="0" SnapsToDevicePixels="True" Data="{StaticResource CloseGeometry}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
                      </Viewbox>
                    </Grid>
                  </Button>
                </Grid>
              </Border>
              <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Padding}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="PART_PinButton" Property="IsChecked" Value="True">
              <Setter TargetName="PinPath" Property="Data" Value="{StaticResource PinnedGeometry}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.RangeSlider" TargetType="{x:Type local:RangeSlider}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <sys:Double x:Key="TrackSizeValue">3</sys:Double>
      <Style x:Key="SimpleSliderStyle" TargetType="{x:Type Slider}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Slider}">
              <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}" SnapsToDevicePixels="true">
                <Track x:Name="PART_Track" MinHeight="{TemplateBinding MinHeight}">
                  <Track.Thumb>
                    <Thumb x:Name="Thumb" Style="{StaticResource Orc.Styles.Slider.Thumb}">
                      <Thumb.ToolTip>
                        <ToolTip Content="{TemplateBinding Value}" ContentStringFormat="N1" />
                      </Thumb.ToolTip>
                    </Thumb>
                  </Track.Thumb>
                </Track>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsKeyboardFocused" Value="true">
                  <Setter Property="Foreground" TargetName="Thumb" Value="Gray" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.AccentColorBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:RangeSlider}">
          <Grid>
            <Border x:Name="PART_TrackBackground" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1">
              <Canvas Margin="0">
                <Rectangle x:Name="PART_SelectedRange" Fill="{TemplateBinding Foreground}" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Visibility="{TemplateBinding HighlightSelectedRange, Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
              </Canvas>
            </Border>
            <Slider x:Name="PART_LowerSlider" Style="{StaticResource SimpleSliderStyle}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" Orientation="{TemplateBinding Orientation}" Value="{Binding LowerValue, RelativeSource={RelativeSource AncestorType={x:Type local:RangeSlider}}, Mode=TwoWay}" />
            <Slider x:Name="PART_UpperSlider" Style="{StaticResource SimpleSliderStyle}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" Orientation="{TemplateBinding Orientation}" Value="{Binding UpperValue, RelativeSource={RelativeSource AncestorType={x:Type local:RangeSlider}}, Mode=TwoWay}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter TargetName="PART_LowerSlider" Property="Margin" Value="0,10,0,0" />
              <Setter TargetName="PART_LowerSlider" Property="VerticalAlignment" Value="Stretch" />
              <Setter TargetName="PART_LowerSlider" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="PART_UpperSlider" Property="Margin" Value="0,0,0,10" />
              <Setter TargetName="PART_UpperSlider" Property="VerticalAlignment" Value="Stretch" />
              <Setter TargetName="PART_UpperSlider" Property="HorizontalAlignment" Value="Center" />
              <Setter TargetName="PART_TrackBackground" Property="Height" Value="{x:Static sys:Double.NaN}" />
              <Setter TargetName="PART_TrackBackground" Property="Width" Value="{StaticResource TrackSizeValue}" />
              <Setter TargetName="PART_TrackBackground" Property="Margin" Value="0,5" />
              <Setter TargetName="PART_TrackBackground" Property="VerticalAlignment" Value="Stretch" />
              <Setter TargetName="PART_TrackBackground" Property="HorizontalAlignment" Value="Center" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
              <Setter TargetName="PART_LowerSlider" Property="Margin" Value="0,0,10,0" />
              <Setter TargetName="PART_LowerSlider" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="PART_LowerSlider" Property="HorizontalAlignment" Value="Stretch" />
              <Setter TargetName="PART_UpperSlider" Property="Margin" Value="10,0,0,0" />
              <Setter TargetName="PART_UpperSlider" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="PART_UpperSlider" Property="HorizontalAlignment" Value="Stretch" />
              <Setter TargetName="PART_TrackBackground" Property="Height" Value="{StaticResource TrackSizeValue}" />
              <Setter TargetName="PART_TrackBackground" Property="Width" Value="{x:Static sys:Double.NaN}" />
              <Setter TargetName="PART_TrackBackground" Property="Margin" Value="5,0" />
              <Setter TargetName="PART_TrackBackground" Property="VerticalAlignment" Value="Center" />
              <Setter TargetName="PART_TrackBackground" Property="HorizontalAlignment" Value="Stretch" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:SpinButton}" TargetType="{x:Type local:SpinButton}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SpinButton}">
          <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" UseLayoutRounding="True">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="1" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <RepeatButton x:Name="PART_IncreaseButton" AutomationProperties.AutomationId="PART_IncreaseButton" Grid.Row="0" Margin="0" Padding="2" BorderThickness="0" Height="NaN" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False" Command="{TemplateBinding Increase}" CommandParameter="{TemplateBinding CommandParameter}">
                <Path Data="M0,4 L4,0 8,4z" Stretch="Fill" Fill="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
              </RepeatButton>
              <Rectangle Fill="{TemplateBinding BorderBrush}" Grid.Row="1" Margin="1 0 1 0" />
              <RepeatButton x:Name="PART_DecreaseButton" AutomationProperties.AutomationId="PART_DecreaseButton" Grid.Row="2" BorderThickness=" 0" Margin="0" Padding="2" Height="NaN" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False" Command="{TemplateBinding Decrease}" CommandParameter="{TemplateBinding CommandParameter}">
                <Path Data="M0,0 L4,4 8,0z" Stretch="Fill" Fill="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
              </RepeatButton>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="3,3,3,1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:TabControl}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}" />
    <Setter Property="Padding" Value="6,1,6,1" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0" />
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto" />
              <RowDefinition x:Name="RowDefinition1" Height="*" />
            </Grid.RowDefinitions>
            <TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
            <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" Grid.Column="0" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
              <Grid x:Name="PART_ItemsHolder" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1" />
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
              <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0" />
              <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
              <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
              <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
              <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1" />
              <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
              <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
              <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
              <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:TimeSpanPicker}" TargetType="{x:Type local:TimeSpanPicker}">
    <Style.Resources>
      <Style x:Key="RatioSignStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
          <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=IsMouseOver}" Value="True">
            <Setter Property="Visibility" Value="Hidden" />
          </DataTrigger>
          <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=IsKeyboardFocusWithin}" Value="True">
            <Setter Property="Visibility" Value="Hidden" />
          </DataTrigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="LettersStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
        <Style.Triggers>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
          </Trigger>
          <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=IsMouseOver}" Value="True">
            <Setter Property="Visibility" Value="Visible" />
          </DataTrigger>
          <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=IsKeyboardFocusWithin}" Value="True">
            <Setter Property="Visibility" Value="Visible" />
          </DataTrigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="TimeSpanBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="MinWidth" Value="115" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
        <Style.Triggers>
          <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
              <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
              <Condition Binding="{Binding Name, RelativeSource={RelativeSource Self}}" Value="MainContainer" />
              <Condition Binding="{Binding Value, Converter={catel:ReferenceToBooleanConverter}}" Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter Property="ToolTip">
              <Setter.Value>
                <Grid Margin="5 2 5 2">
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <TextBlock Grid.Column="0" Grid.Row="0" Text="{catel:LanguageBinding Controls_TimeSpanPickerGeneric_TextBlock_Text_Total}" HorizontalAlignment="Left" />
                  <TextBlock Grid.Column="0" Grid.Row="1" Text="{catel:LanguageBinding Controls_TimeSpanPickerGeneric_TextBlock_Text_Days}" HorizontalAlignment="Left" Margin="10 0 10 0" />
                  <TextBlock Grid.Column="0" Grid.Row="2" Text="{catel:LanguageBinding Controls_TimeSpanPickerGeneric_TextBlock_Text_Hours}" HorizontalAlignment="Left" Margin="10 0 10 0" />
                  <TextBlock Grid.Column="0" Grid.Row="3" Text="{catel:LanguageBinding Controls_TimeSpanPickerGeneric_TextBlock_Text_Minutes}" HorizontalAlignment="Left" Margin="10 0 10 0" />
                  <TextBlock Grid.Column="1" Grid.Row="1" HorizontalAlignment="Left" Text="{Binding Value, Converter={converters:TimeSpanToTotalStringConverter}, ConverterParameter=Days}" />
                  <TextBlock Grid.Column="1" Grid.Row="2" HorizontalAlignment="Left" Text="{Binding Value, Converter={converters:TimeSpanToTotalStringConverter}, ConverterParameter=Hours}" />
                  <TextBlock Grid.Column="1" Grid.Row="3" HorizontalAlignment="Left" Text="{Binding Value, Converter={converters:TimeSpanToTotalStringConverter}, ConverterParameter=Minutes}" />
                </Grid>
              </Setter.Value>
            </Setter>
          </MultiDataTrigger>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
          </Trigger>
          <Trigger Property="IsKeyboardFocusWithin" Value="True">
            <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style BasedOn="{x:Null}" TargetType="{x:Type local:NumericTextBox}">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="Margin" Value="2 0 0 0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
      </Style>
    </Style.Resources>
    <Setter Property="local:EnterKeyTraversal.IsEnabled" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:TimeSpanPicker}">
          <Grid VerticalAlignment="Stretch">
            <Border x:Name="PART_MainContainer" Margin="0" Padding="{TemplateBinding Padding}" BorderThickness="1" Visibility="{Binding ElementName=PART_NumericTBEditorContainerBorder, Path=IsVisible, Converter={catel:BooleanToCollapsingVisibilityConverter SupportInversionUsingCommandParameter=True}, ConverterParameter=True}" Style="{DynamicResource TimeSpanBorderStyle}">
              <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <local:NumericTextBox x:Name="PART_DaysNumericTextBox" IsNegativeAllowed="False" MinValue="0" MaxValue="100" IsReadOnly="{TemplateBinding IsReadOnly}" />
                <TextBlock x:Name="PART_DaysHoursSeparatorTextBlock" Grid.Column="1" Text="." Style="{StaticResource RatioSignStyle}" />
                <TextBlock x:Name="PART_DaysAbbreviationTextBlock" Grid.Column="1" Text="{catel:LanguageBinding Controls_TimeSpanPicker_TextBlock_Text_DaysAbbreviation}" Tag="{x:Static local:TimeSpanPart.Days}" Style="{StaticResource LettersStyle}" />
                <local:NumericTextBox x:Name="PART_HoursNumericTextBox" Grid.Column="2" IsNegativeAllowed="False" MaxValue="23" MinValue="0" IsReadOnly="{TemplateBinding IsReadOnly}" />
                <TextBlock x:Name="PART_HoursMinutesSeparatorTextBlock" Grid.Column="3" Text=":" Style="{StaticResource RatioSignStyle}" />
                <TextBlock x:Name="PART_HoursAbbreviationTextBlock" Grid.Column="3" Text="{catel:LanguageBinding Controls_TimeSpanPicker_TextBlock_Text_HoursAbbreviation}" Tag="{x:Static local:TimeSpanPart.Hours}" Style="{StaticResource LettersStyle}" />
                <local:NumericTextBox x:Name="PART_MinutesNumericTextBox" Grid.Column="4" IsNegativeAllowed="False" MaxValue="59" MinValue="0" IsReadOnly="{TemplateBinding IsReadOnly}" />
                <TextBlock x:Name="PART_MinutesSecondsSeparatorTextBlock" Grid.Column="5" Text=":" Style="{StaticResource RatioSignStyle}" />
                <TextBlock x:Name="PART_MinutesAbbreviationTextBlock" Grid.Column="5" Text="{catel:LanguageBinding Controls_TimeSpanPicker_TextBlock_Text_MinutesAbbreviation}" Tag="{x:Static local:TimeSpanPart.Minutes}" Style="{StaticResource LettersStyle}" />
                <local:NumericTextBox x:Name="PART_SecondsNumericTextBox" Grid.Column="6" IsNegativeAllowed="False" MaxValue="59" MinValue="0" IsReadOnly="{TemplateBinding IsReadOnly}" />
                <TextBlock x:Name="PART_SecondsAbbreviationTextBlock" Grid.Column="7" Text="{catel:LanguageBinding Controls_TimeSpanPicker_TextBlock_Text_SecondsAbbreviation}" Tag="{x:Static local:TimeSpanPart.Seconds}" Style="{StaticResource LettersStyle}" />
              </Grid>
            </Border>
            <Border x:Name="PART_NumericTBEditorContainerBorder" Margin="0" Padding="{TemplateBinding Padding}" Grid.ColumnSpan="8" Style="{DynamicResource TimeSpanBorderStyle}" BorderThickness="1" Width="{Binding ActualWidth, ElementName=PART_MainContainer}" Height="{Binding ActualHeight, ElementName=PART_MainContainer}" Visibility="Collapsed">
              <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <local:NumericTextBox x:Name="PART_EditorNumericTextBox" Grid.Column="0" MinValue="0" Format="0.#####" Margin="2 0 2 0" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" IsNegativeAllowed="True" IsDecimalAllowed="True" IsReadOnly="{TemplateBinding IsReadOnly}" />
                <TextBlock x:Name="PART_EditedUnitTextBlock" Foreground="DarkGray" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 4 0" />
              </Grid>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ValidationContextButtonWithIconStyle" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="Chrome" BorderBrush="{DynamicResource Orc.Brushes.Control.Border}" BorderThickness="1" Background="{DynamicResource Orc.Brushes.Control.Background}" SnapsToDevicePixels="True" Padding="4 0 4 0" Margin="4 0 0 0">
            <StackPanel Orientation="Horizontal">
              <Grid>
                <Viewbox x:Name="Viewbox" Height="12" Width="12">
                  <Path Data="{TemplateBinding Path.Data}" HorizontalAlignment="Center" Margin="0" SnapsToDevicePixels="True" Stretch="Fill" UseLayoutRounding="True" Fill="{TemplateBinding BorderBrush}" VerticalAlignment="Center" />
                </Viewbox>
                <TextBlock x:Name="TextBlock" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" FontSize="{orctheming:FontSize 9}" Foreground="{TemplateBinding BorderBrush}" />
              </Grid>
              <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="CollapseAll">
              <Setter Property="Path.Data" Value="{StaticResource ArrowsInGeometry}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="ExpandAll">
              <Setter Property="Path.Data" Value="{StaticResource ArrowsOutGeometry}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
              <Setter Property="BorderBrush" Value="#FFADADAD" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Border}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" TargetName="Chrome" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
              <Setter Property="BorderBrush" TargetName="Chrome" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Background" TargetName="Chrome" Value="{DynamicResource Orc.Brushes.Control.Pressed.Background}" />
              <Setter Property="BorderBrush" TargetName="Chrome" Value="{DynamicResource Orc.Brushes.Control.Pressed.Border}" />
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Pressed.Foreground}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="#FFADADAD" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ValidationContextExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Width" Value="16" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="Transparent" Stroke="Black">
              <Path.RenderTransform>
                <RotateTransform Angle="135" CenterY="3" CenterX="3" />
              </Path.RenderTransform>
            </Path>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="RenderTransform" TargetName="ExpandPath">
                <Setter.Value>
                  <RotateTransform Angle="180" CenterY="3" CenterX="3" />
                </Setter.Value>
              </Setter>
              <Setter Property="Fill" TargetName="ExpandPath" Value="Black" />
              <Setter Property="Stroke" TargetName="ExpandPath" Value="Black" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Stroke" TargetName="ExpandPath" Value="{orctheming:ThemeColorBrush ThemeColorStyle=AccentColor}" />
              <Setter Property="Fill" TargetName="ExpandPath" Value="{orctheming:ThemeColorBrush ThemeColorStyle=AccentColor}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsChecked" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Stroke" TargetName="ExpandPath" Value="{orctheming:ThemeColorBrush ThemeColorStyle=AccentColor}" />
              <Setter Property="Fill" TargetName="ExpandPath" Value="{orctheming:ThemeColorBrush ThemeColorStyle=AccentColor}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsChecked" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Property="Stroke" TargetName="ExpandPath" Value="{orctheming:ThemeColorBrush ThemeColorStyle=AccentColor}" />
              <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ValidationContextTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
    <Setter Property="Visibility" Value="{Binding IsVisible, Converter={catel:BooleanToCollapsingVisibilityConverter}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="MinHeight" Value="14" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="2" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource ValidationContextTreeViewItemFocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <StackPanel>
            <Border Name="Bd" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
              <Grid Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="15" />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="Expander" Grid.Column="0" Style="{DynamicResource ValidationContextExpandCollapseToggleStyle}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
                <ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
              </Grid>
            </Border>
            <ItemsPresenter x:Name="ItemsHost" />
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="false">
              <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="false" />
                <Condition Property="Height" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinHeight" Value="21" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="Background" TargetName="Bd" Value="{orctheming:ThemeColorBrush ThemeColorStyle=SelectionActiveBackground}" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext.IsActive}" Value="True">
              <Setter TargetName="Bd" Property="Background" Value="WhiteSmoke" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext.IsActive}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{orctheming:ThemeColorBrush ThemeColorStyle=SelectionActiveBackground}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{StaticResource ValidationContextTreeViewDisabledForegroundBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type local:WatermarkTextBox}" TargetType="{x:Type local:WatermarkTextBox}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:WatermarkTextBox}">
          <Grid>
            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" />
            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <ContentPresenter x:Name="PART_WatermarkHost" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Watermark}" ContentTemplate="{TemplateBinding WatermarkTemplate}" IsHitTestVisible="False" Visibility="Collapsed">
              <ContentPresenter.Resources>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                  <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
                </Style>
              </ContentPresenter.Resources>
            </ContentPresenter>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsFocused" Value="False" />
                <Condition Property="Text" Value="" />
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter TargetName="PART_WatermarkHost" Property="Visibility" Value="Visible" />
              </MultiTrigger.Setters>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboboxColorPickerStyle" TargetType="{x:Type local:ColorPicker}" BasedOn="{StaticResource {x:Type local:ColorPicker}}">
    <Setter Property="Height" Value="25" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Margin" Value="6" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ColorPicker}">
          <Border x:Name="ColorPickerBorder" BorderBrush="{DynamicResource Orc.Brushes.Control.Default.Border}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <ToggleButton x:Name="PART_ToggleDropDown" IsTabStop="False" ClickMode="Press" Height="NaN" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
                <ToggleButton.Template>
                  <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="10" />
                      </Grid.ColumnDefinitions>
                      <Rectangle Grid.Column="0" Grid.ColumnSpan="2" Fill="Transparent" Stretch="Fill" />
                      <ContentPresenter Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                      <Path x:Name="arrow" Data="M0,0L3.5,4 7,0z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Grid.Column="1" Width="8" Visibility="Visible" />
                    </Grid>
                  </ControlTemplate>
                </ToggleButton.Template>
                <ToggleButton.Content>
                  <Rectangle x:Name="ColorSurface" Stretch="Fill" Margin="1" Fill="{Binding Color, RelativeSource={RelativeSource TemplatedParent}, Converter={catel:ColorToBrushConverter}}" />
                </ToggleButton.Content>
              </ToggleButton>
              <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Relative" HorizontalOffset="-1" IsOpen="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" />
            </Grid>
            <Border.Style>
              <Style TargetType="Border">
                <Style.Triggers>
                  <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
                  </Trigger>
                </Style.Triggers>
              </Style>
            </Border.Style>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="PART_ToggleDropDown" Property="IsMouseOver" Value="True">
              <Setter TargetName="ColorPickerBorder" Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
            </Trigger>
            <Trigger SourceName="PART_ToggleDropDown" Property="IsChecked" Value="True">
              <Setter TargetName="ColorPickerBorder" Property="Background" Value="{DynamicResource Orc.Brushes.Control.Checked.Background}" />
              <Setter TargetName="ColorPickerBorder" Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Checked.Border}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultTabControlStyle" TargetType="{x:Type local:TabControl}" BasedOn="{StaticResource {x:Type local:TabControl}}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="DefaultDropDownButtonStyle" TargetType="{x:Type local:DropDownButton}" BasedOn="{StaticResource Orc.Styles.DropDownButton}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Button}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultBindableRichTextBoxStyle" TargetType="{x:Type local:BindableRichTextBox}" BasedOn="{StaticResource {x:Type local:BindableRichTextBox}}">
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultFilterBoxStyle" TargetType="{x:Type local:FilterBox}" BasedOn="{StaticResource {x:Type local:FilterBox}}">
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultFluidProgressBarStyle" TargetType="{x:Type local:FluidProgressBar}" BasedOn="{StaticResource {x:Type local:FluidProgressBar}}" />
  <Style x:Key="DefaultExpanderStyle" TargetType="{x:Type local:Expander}" BasedOn="{StaticResource {x:Type local:Expander}}" />
  <Style x:Key="DefaultTimeSpanPickerStyle" TargetType="{x:Type local:TimeSpanPicker}" BasedOn="{StaticResource {x:Type local:TimeSpanPicker}}">
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultDateTimePickerStyle" TargetType="{x:Type local:DateTimePicker}" BasedOn="{StaticResource {x:Type local:DateTimePicker}}">
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultNumericUpDownStyle" TargetType="{x:Type local:NumericUpDown}" BasedOn="{StaticResource {x:Type local:NumericUpDown}}">
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultSpinButtonStyle" TargetType="{x:Type local:SpinButton}" BasedOn="{StaticResource {x:Type local:SpinButton}}">
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="Width" Value="18" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultTimePickerStyle" TargetType="{x:Type local:TimePicker}">
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultLinkLabelStyle" TargetType="{x:Type local:LinkLabel}" BasedOn="{StaticResource {x:Type local:LinkLabel}}">
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="DefaultLogMessageCategoryControlStyle" TargetType="{x:Type local:LogMessageCategoryControl}" BasedOn="{StaticResource {x:Type local:LogMessageCategoryControl}}" />
  <Style x:Key="DefaultLogMessageCategoryToggleButtonStyle" TargetType="{x:Type local:LogMessageCategoryToggleButton}" BasedOn="{StaticResource {x:Type local:LogMessageCategoryToggleButton}}" />
  <Style x:Key="DefaultNumericTextBoxStyle" TargetType="{x:Type local:NumericTextBox}" BasedOn="{StaticResource {x:Type local:NumericTextBox}}">
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultListTextBoxStyle" TargetType="{x:Type local:ListTextBox}" BasedOn="{StaticResource {x:Type local:ListTextBox}}">
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultRangeSliderStyle" TargetType="{x:Type local:RangeSlider}" BasedOn="{StaticResource Orc.Styles.RangeSlider}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="DefaultBusyIndicatorStyle" TargetType="{x:Type local:BusyIndicator}" BasedOn="{StaticResource {x:Type local:BusyIndicator}}" />
  <Style x:Key="DefaultWatermarkTextBoxStyle" TargetType="{x:Type local:WatermarkTextBox}" BasedOn="{StaticResource {x:Type local:WatermarkTextBox}}">
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultLogViewerControlStyle" TargetType="{x:Type local:LogViewerControl}" BasedOn="{StaticResource {x:Type local:LogViewerControl}}">
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
  </Style>
</ResourceDictionary>